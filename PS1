import util
import numpy as np
import matplotlib.pyplot as plt

np.seterr(all='raise')


factor = 2.0

class LinearModel(object):
  """Base class for linear models.
  Attributes:
    theta: np.ndarray, dtype=np.float64, shape=(n_features,). Weights vector for
      the model.
  """

  def __init__(self, theta=None):
    """
    Args:
      theta: (See class definition)
    """
    self.theta = theta

  def fit(self, x, y):
    """Fits the linear model to x -> y using np.linalg.solve.
    Remember to update self.theta with the fitted model parameters.
    Args:
      x: np.ndarray, dtype=np.float64, shape=(n_examples, n_features). Inputs.
      y: np.ndarray, dtype=np.float64, shape=(n_examples,). Outputs.
    Returns: Nothing
    """
    pass
    # *** START CODE HERE ***
    
    X_t = np.transpose(x) #take a transpose of x into X_t
    X_t_X = np.dot(X_t, x) #Take a dot product of x & Xt in one array
    X_t_y = np.dot(X_t, y) #Take another dot product of xt & y
    self.theta = np.linalg.solve(X_t_X, X_t_y).reshape(-1,1)
    
    # *** END CODE HERE ***

  def predict(self, x):
    """ Makes a prediction given a new set of input features.
    Args:
      x: np.ndarray, dtype=np.float64, shape=(n_examples, n_features). Model input.
    Returns: np.float64. Model output.
    """
    pass
    # *** START CODE HERE ***
    
    predict_x = x.dot(self.theta)
    return(predict_x)
    
    # *** END CODE HERE ***

  @staticmethod
  def create_poly(k, x):
    """ Generates polynomial features of the input data x.
    
    Args:
      x: np.ndarray, dtype=np.float64, shape=(n_examples,). Training inputs.
    
    Returns: np.ndarray, dtype=np.float64, shape=(n_examples, k+1). Polynomial
      features of x with powers 0 to k (inclusive).
    """
    pass
    # *** START CODE HERE ***
    
    poly_in = np.poly1d([n,1])
    
    #x-poly = [x0 =1, x1= x^1, x2 = x^2, x3=x^3....... = 1, x1]
    poly_out shape ([n, k+1]) #adding in 0,0 term?
    
    
    print(np.poly1d(p))
    
    # *** END CODE HERE ***

  @staticmethod
  def create_sin(k, x):
    """ Generates sine and polynomial features of the input data x.
    Args:
      x: np.ndarray, dtype=np.float64, shape=(n_examples,). Training inputs.
    
    Returns: np.ndarray, dtype=np.float64, shape=(n_examples, k+2). Sine (axis
      0) and polynomial (axes 1 to k+1) features of x with powers 0 to k
      (inclusive).
    """
    pass
    # *** START CODE HERE ***
    
    # *** END CODE HERE ***

def run_exp(train_path, sine=False, ks=[1, 2, 3, 5, 10, 20], filename='plot.png'):
  train_x,train_y=util.load_dataset(train_path,add_intercept=False)
  plot_x = np.ones([1000, 1])
  plot_x[:, 0] = np.linspace(-factor*np.pi, factor*np.pi, 1000)
  plt.figure()
  plt.scatter(train_x, train_y)

  for k in ks:
      '''
      Our objective is to train models and perform predictions on plot_x data
      '''
      # *** START CODE HERE ***
      # *** END CODE HERE ***
      '''
      Here plot_y are the predictions of the linear model on the plot_x data
      '''
      plt.ylim(-2, 2)
      plt.plot(plot_x[:, 0], plot_y, label='k=%d' % k)

  plt.legend()
  plt.savefig(filename)
  plt.clf()


def main(train_path, small_path, eval_path):
  '''
  Run all experiments
  '''
  
  # *** START CODE HERE ***
  # *** END CODE HERE ***

if __name__ == '__main__':
  main(train_path='train.csv',
      small_path='small.csv',
      eval_path='test.csv')
      
